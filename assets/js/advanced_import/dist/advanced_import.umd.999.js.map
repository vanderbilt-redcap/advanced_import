{"version":3,"file":"advanced_import.umd.999.js","mappings":";;;;;;;;;;;;;;;AAAA,IAAIA,MAAM,GAAG,SAASA,MAAM,GAAE;EAAC,IAAIC,GAAG,GAAC,IAAI;IAACC,EAAE,GAACD,GAAG,CAACE,KAAK,CAACD,EAAE;EAAC,OAAOA,EAAE,CAAC,KAAK,EAAC,CAACA,EAAE,CAAC,GAAG,EAAC,CAACD,GAAG,CAACG,EAAE,CAAC,oDAAoD,CAAC,CAAC,CAAC,EAACF,EAAE,CAAC,KAAK,EAAC;IAACG,WAAW,EAAC;EAAoC,CAAC,EAAC,CAACH,EAAE,CAAC,gBAAgB,EAAC;IAACG,WAAW,EAAC,UAAU;IAACC,EAAE,EAAC;MAAC,OAAO,EAACL,GAAG,CAACM;IAAQ,CAAC;IAACC,KAAK,EAAC;MAACC,KAAK,EAAER,GAAG,CAACS,eAAgB;MAACC,QAAQ,EAAC,UAAUC,GAAG,EAAE;QAACX,GAAG,CAACS,eAAe,GAACE,GAAG;MAAA,CAAC;MAACC,UAAU,EAAC;IAAiB;EAAC,CAAC,CAAC,EAACX,EAAE,CAAC,eAAe,EAAC;IAACG,WAAW,EAAC,UAAU;IAACC,EAAE,EAAC;MAAC,OAAO,EAACL,GAAG,CAACM;IAAQ,CAAC;IAACC,KAAK,EAAC;MAACC,KAAK,EAAER,GAAG,CAACa,cAAe;MAACH,QAAQ,EAAC,UAAUC,GAAG,EAAE;QAACX,GAAG,CAACa,cAAc,GAACF,GAAG;MAAA,CAAC;MAACC,UAAU,EAAC;IAAgB;EAAC,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAACX,EAAE,CAAC,KAAK,EAAC;IAACG,WAAW,EAAC;EAAiD,CAAC,EAAC,CAACJ,GAAG,CAACc,EAAE,CAAC,MAAM,CAAC,EAACd,GAAG,CAACc,EAAE,CAAC,SAAS,CAAC,EAACd,GAAG,CAACc,EAAE,CAAC,OAAO,EAAC,IAAI,EAAC;IAAC,YAAY,EAACd,GAAG,CAACe;EAAE,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC,CAAC;AACluB,CAAC;AACD,IAAIC,eAAe,GAAG,EAAE;;;;;;;;;AC4BxB;AAEA;AACA;AAEA,yEAAe;EACfC;IAAAC,cAAAA,EAAAA,8BAAAA;IAAAC,aAAAA,EAAAA,4BAAAA;EAAA;EACAC;IACA;EACA;EACAC;IACAZ;MACAa;QAAA;MAAA;MACAC;QACA;UAAAC;UAAAhB;QAAA;MACA;IACA;IACAK;MACAS;QAAA;MAAA;MACAC;QAAA;UAAAC;UAAAhB;QAAA;MAAA;IACA;IACAiB;MACAH;QAAA;MAAA;MACAC;QAAA;UAAAC;UAAAhB;QAAA;MAAA;IACA;EACA;EACAkB;IACA;MACAjB;QACAkB,UAAAA,iCAAAA,WAAAA,8CAAAA;QACA;AACA;AACA;AACA;MACA;;MACAd;QAAAc,QAAAA,EAAAA,2BAAAA;MAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;;EACAC;IACA;IACAtB;MACA;QACAuB;QACAC;MACA;MACA;MACA;MACA;MACA;QAAAC;QAAAC;MAAA;IACA;EACA;AACA,CAAC;;ACzFuW,CAAC,gFAAe,oCAAG,EAAC;;;;ACAjS;AAC3B;AACL;;;AAG3D;AACA,CAAoI;AACpI,gBAAgB,sCAAU;AAC1B,EAAE,2CAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,iDAAe","sources":["webpack://advanced_import/./src/components/import/RecordFormat.vue","webpack://advanced_import/src/components/import/RecordFormat.vue","webpack://advanced_import/./src/components/import/RecordFormat.vue?8f35","webpack://advanced_import/./src/components/import/RecordFormat.vue?4701"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('p',[_vm._v(\"Select the field delimiter and the text qualifier.\")]),_c('div',{staticClass:\"d-flex flex-row align-items-center\"},[_c('FieldDelimiter',{staticClass:\"col pl-0\",on:{\"input\":_vm.onChange},model:{value:(_vm.field_delimiter),callback:function ($$v) {_vm.field_delimiter=$$v},expression:\"field_delimiter\"}}),_c('TextQualifier',{staticClass:\"col px-0\",on:{\"input\":_vm.onChange},model:{value:(_vm.text_qualifier),callback:function ($$v) {_vm.text_qualifier=$$v},expression:\"text_qualifier\"}})],1),_c('div',{staticClass:\"buttons d-flex flex-row justify-content-between\"},[_vm._t(\"left\"),_vm._t(\"default\"),_vm._t(\"right\",null,{\"validation\":_vm.$v})],2)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <p>Select the field delimiter and the text qualifier.</p>\n    <div class=\"d-flex flex-row align-items-center\">\n      \n      <FieldDelimiter v-model=\"field_delimiter\" class=\"col pl-0\" @input=\"onChange\"/>\n      \n      <TextQualifier v-model=\"text_qualifier\" class=\"col px-0\" @input=\"onChange\"/>\n\n      <!-- <div class=\"form-group ml-2\">\n        <label for=\"record_delimiter\">Record delimiter</label>\n        <select class=\"form-control\" id=\"record_delimiter\" v-model=\"record_delimiter\">\n            <option value='crlf'>CRLF</option>\n            <option value='cr'>CR</option>\n            <option value='lf'>LF</option>\n        </select>\n      </div> -->\n\n    </div>\n\n    <div class=\"buttons d-flex flex-row justify-content-between\" >\n        <slot name=\"left\" ></slot>\n        <slot></slot>\n        <slot name=\"right\" :validation=\"$v\"></slot>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { required, requiredIf } from 'vuelidate/lib/validators'\n\nimport {default as FieldDelimiter, isStandardDelimiter} from '@/components/FieldDelimiter'\nimport TextQualifier from '@/components/TextQualifier'\n\nexport default {\n  components: {FieldDelimiter, TextQualifier},\n  data() {\n    return {}\n  },\n  computed: {\n    field_delimiter: {\n      get() { return this.$store.state.import_settings.field_delimiter },\n      set(value) {\n        this.$store.dispatch('import_settings/setStateProperty', {key: 'field_delimiter', value})\n      },\n    },\n    text_qualifier: {\n      get() { return this.$store.state.import_settings.text_qualifier },\n      set(value) { this.$store.dispatch('import_settings/setStateProperty', {key: 'text_qualifier', value})},\n    },\n    record_delimiter: {\n      get() { return this.$store.state.import_settings.record_delimiter },\n      set(value) { this.$store.dispatch('import_settings/setStateProperty', {key: 'record_delimiter', value})},\n    },\n  },\n  validations() {\n    return {\n      field_delimiter: {\n        required: requiredIf((value) => !isStandardDelimiter(value)),\n        /* allowedDelimiter: (value) => {\n          const allowed_delimiters = Object.values(FIELD_DELIMITERS).map(delimiter => delimiter.value)\n          return allowed_delimiters.indexOf(value) >= 0\n        } */\n      },\n      text_qualifier: {required},\n      // custom_field_delimiter: {\n      //   alphaNum,\n      //   required: requiredIf(() => this.field_delimiter=='other'),\n      //   /* also_check_field_delimiter: async (value, vm) => {\n      //     if(vm.field_delimiter!=='other') return true\n      //       else return await String(value).match(/[^\\s]/)\n      //   } */\n      // }\n    }\n  },\n  methods: {\n    // parse the text whenever the delimiter or text qualifier are changed\n    onChange() {\n        let config = {\n          delimiter: this.field_delimiter,\n          quoteChar: this.text_qualifier,\n        }\n        // exit if FieldDelimiter element is set to 'other' (value is empty string)\n        if(config.delimiter=='') return\n        const text = this.$store.state.csv_data.text\n        this.$store.dispatch('csv_data/parse', {text, config})\n    }\n  },\n}\n</script>\n\n<style>\n\n</style>","import mod from \"-!../../../node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-82.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RecordFormat.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/@vue/cli-plugin-babel/node_modules/thread-loader/dist/cjs.js!../../../node_modules/@vue/cli-plugin-babel/node_modules/babel-loader/lib/index.js??clonedRuleSet-82.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./RecordFormat.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./RecordFormat.vue?vue&type=template&id=51da2bac&\"\nimport script from \"./RecordFormat.vue?vue&type=script&lang=js&\"\nexport * from \"./RecordFormat.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","_c","_self","_v","staticClass","on","onChange","model","value","field_delimiter","callback","$$v","expression","text_qualifier","_t","$v","staticRenderFns","components","FieldDelimiter","TextQualifier","data","computed","get","set","key","record_delimiter","validations","required","methods","delimiter","quoteChar","text","config"],"sourceRoot":""}